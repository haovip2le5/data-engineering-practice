
import requests
from bs4 import BeautifulSoup
import pandas as pd
import os
import sys

# URL c·ªßa th∆∞ m·ª•c ch·ª©a d·ªØ li·ªáu
URL = "https://www.ncei.noaa.gov/data/local-climatological-data/access/2021/"
# Th·ªùi ƒëi·ªÉm c·∫ßn t√¨m
TARGET_TIMESTAMP = "2024-01-19 10:27"

def scrape_file_name():
    """
    Scrape b·∫£ng <table> tr√™n trang ƒë·ªÉ t√¨m file .csv
    c√≥ Last Modified = TARGET_TIMESTAMP.
    """
    print(f"üîç Fetching directory listing from {URL}")
    r = requests.get(URL)
    r.raise_for_status()

    soup = BeautifulSoup(r.text, "html.parser")
    table = soup.find("table")
    if not table:
        print("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng <table> ch·ª©a danh s√°ch file.")
        return None

    # Duy·ªát qua t·ª´ng h√†ng (b·ªè header)
    rows = table.find_all("tr")[1:]
    for row in rows:
        cols = row.find_all("td")
        if len(cols) < 2:
            continue
        last_mod = cols[1].text.strip()
        if TARGET_TIMESTAMP in last_mod:
            link = cols[0].find("a", href=True)
            if link and link["href"].endswith(".csv"):
                filename = link["href"]
                print(f"‚úÖ Matched: {filename}  ({last_mod})")
                return filename

    print("‚ùå Kh√¥ng t√¨m th·∫•y file ph√π h·ª£p v·ªõi timestamp.")
    return None

def download_file(filename):
    """
    T·∫£i v·ªÅ v√† l∆∞u v√†o th∆∞ m·ª•c downloads/.
    """
    file_url = URL + filename
    print(f"‚¨áÔ∏è Downloading {file_url}")
    r = requests.get(file_url)
    r.raise_for_status()

    os.makedirs("downloads", exist_ok=True)
    local_path = os.path.join("downloads", filename)
    with open(local_path, "wb") as f:
        f.write(r.content)
    print(f"‚úÖ Saved to {local_path}")
    return local_path

def analyze_temperature(csv_path):
    """
    ƒê·ªçc CSV, t√¨m b·∫£n ghi c√≥ HourlyDryBulbTemperature cao nh·∫•t,
    v√† in g·ªçn 3 c·ªôt: STATION, DATE, HourlyDryBulbTemperature.
    """
    print(f"üîé Analyzing {csv_path}")
    df = pd.read_csv(csv_path)

    col = "HourlyDryBulbTemperature"
    if col not in df.columns:
        print(f"‚ùå Column '{col}' kh√¥ng t·ªìn t·∫°i. C√°c c·ªôt c√≥ s·∫µn:")
        print(df.columns.tolist())
        return

    # Chuy·ªÉn gi√° tr·ªã sang s·ªë, b·ªè gi√° tr·ªã l·ªói
    df[col] = pd.to_numeric(df[col], errors="coerce")
    max_temp = df[col].max()
    top = df[df[col] == max_temp]

    print(f"üå°Ô∏è Highest {col} = {max_temp}")
    print(top[["STATION","DATE",col]].to_string(index=False))

def main():
    print("=== Exercise 2: Web scrape + download + Pandas analysis ===")
    filename = scrape_file_name()
    if not filename:
        sys.exit(1)

    csv_path = download_file(filename)
    analyze_temperature(csv_path)

if __name__ == "__main__":
    main()
